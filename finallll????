<!DOCTYPE html>
<html>
<head>
    <style>
        .talk {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
        .content {
            margin-top: 20px;
            font-size: 18px;
        }
    </style>
</head>
<body>
    <button class="talk">Start Listening</button>
    <div class="content">JARVIS's Response</div>

    <script>
        const btn = document.querySelector('.talk');
        const content = document.querySelector('.content');
        let todoList = []; 
        let currentVolume = 1; 

        // Make JARVIS speak
        function speak(text) {
            const textSpeak = new SpeechSynthesisUtterance(text);
            textSpeak.rate = 1;
            textSpeak.volume = currentVolume;
            textSpeak.pitch = 1;
            window.speechSynthesis.speak(textSpeak);
        }

        // Greet user
        function wishMe() {
            const hour = new Date().getHours();
            if (hour < 12) {
                speak("Good Morning.");
            } else if (hour < 17) {
                speak("Good Afternoon.");
            } else {
                speak("Good Evening.");
            }
        }

        // Introduce JARVIS
        function introduceAssistant() {
            speak("I am JARVIS, your personal assistant, created by Sachin.");
        }

        // Initialize JARVIS
        window.addEventListener('load', () => {
            speak("Initializing JARVIS...");
            wishMe();
            introduceAssistant();
        });

        // Speech Recognition Setup
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.onresult = (event) => {
            const transcript = event.results[event.resultIndex][0].transcript;
            content.textContent = transcript;
            takeCommand(transcript.toLowerCase());
        };
        recognition.onerror = () => speak("Sorry, I didn't catch that. Please try again.");
        btn.addEventListener('click', () => {
            content.textContent = "Listening...";
            recognition.start();
        });

        // Command Handler
        function takeCommand(message) {
            if (message.includes('hello') || message.includes('hey')) {
                speak("Hello! How may I assist you?");
            } else if (message.includes("open")) {
                handleOpenCommand(message);
            } else if (message.includes("play") && message.includes("youtube")) {
                playYouTube(message);
            } else if (message.includes("weather")) {
                fetchWeather();
            } else if (message.includes("set timer for")) {
                setTimer(message);
            } else if (message.includes("define")) {
                defineWord(message);
            } else if (message.includes("news")) {
                fetchNews();
            } else if (message.includes("shutdown") || message.includes("restart")) {
                executeSystemCommand(message);
            } else if (message.includes("add task")) {
                const task = message.replace("add task", "").trim();
                addTask(task);
            } else if (message.includes("remove task")) {
                const task = message.replace("remove task", "").trim();
                removeTask(task);
            } else if (message.includes("show tasks")) {
                showTasks();
            } else if (message.includes("increase volume")) {
                adjustVolume('increase');
            } else if (message.includes("decrease volume")) {
                adjustVolume('decrease');
            } else if (message.includes("mute")) {
                adjustVolume('mute');
            } else {
                speak("I'm sorry, I didn't understand that.");
            }
        }

        // Open Websites
        function handleOpenCommand(message) {
            const websites = {
                google: "https://google.com",
                youtube: "https://youtube.com",
                instagram: "https://instagram.com",
                discord: "https://discord.com",
                facebook: "https://facebook.com",
                twitter: "https://twitter.com",
                linkedin: "https://linkedin.com",
                reddit: "https://reddit.com"
            };
            for (const site in websites) {
                if (message.includes(site)) {
                    window.open(websites[site], "_blank");
                    speak(`Opening ${site.charAt(0).toUpperCase() + site.slice(1)}...`);
                    return;
                }
            }
        }

        // Play YouTube Video
        function playYouTube(message) {
            const videoName = message.replace("play", "").replace("youtube", "").trim();
            window.open(`https://www.youtube.com/results?search_query=${encodeURIComponent(videoName)}`, "_blank");
            speak(`Searching for ${videoName} on YouTube...`);
        }

        // Dummy Weather Response
        function fetchWeather() {
            speak("The current temperature is 25 degrees Celsius with clear skies.");
        }

        // Timer Function
        function setTimer(message) {
            const time = parseInt(message.replace("set timer for", "").trim());
            if (!isNaN(time)) {
                setTimeout(() => speak(`Time's up! Your ${time} minute timer is complete.`), time * 60000);
                speak(`Setting a timer for ${time} minutes.`);
            }
        }

        // Define Word
        async function defineWord(message) {
            const word = message.replace("define", "").trim();
            const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);
            const data = await response.json();
            if (data && data[0]) {
                speak(`The definition of ${word} is: ${data[0].meanings[0].definitions[0].definition}`);
            } else {
                speak("Sorry, I couldn't find the definition.");
            }
        }

        // Fetch News Headlines
        async function fetchNews() {
            const response = await fetch(`https://newsapi.org/v2/top-headlines?country=us&apiKey=YOUR_NEWS_API_KEY`);
            const data = await response.json();
            if (data.articles) {
                speak("Here are the latest news headlines:");
                data.articles.slice(0, 5).forEach((article, index) => {
                    speak(`${index + 1}. ${article.title}`);
                });
            } else {
                speak("Sorry, I couldn't fetch the news.");
            }
        }

        // Execute System Command (Requires backend for security)
        function executeSystemCommand(message) {
            if (message.includes("shutdown system")) {
                speak("System shutting down..."); 
                // Execute shutdown command on the backend or Electron app for actual execution
            } else if (message.includes("restart system")) {
                speak("System restarting..."); 
            }
        }

        // Volume Control
        function adjustVolume(action) {
            if (action === 'increase') currentVolume = Math.min(currentVolume + 0.1, 1);
            else if (action === 'decrease') currentVolume = Math.max(currentVolume - 0.1, 0);
            else if (action === 'mute') currentVolume = 0;
            speak(`Volume adjusted.`);
        }

        // Task Management
        function addTask(task) { todoList.push(task); speak(`Task added: ${task}`); }
        function removeTask(task) {
            const index = todoList.indexOf(task);
            if (index > -1) { todoList.splice(index, 1); speak(`Task removed: ${task}`); }
            else speak(`Task not found.`);
        }
        function showTasks() {
            if (todoList.length) {
                speak("Your tasks are:");
                todoList.forEach((task, i) => speak(`${i + 1}. ${task}`));
            } else speak("Your task list is empty.");
        }
    </script>
</body>
</html>
